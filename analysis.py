import ast

pdr = 0.3

def main():
    with open('all_data.txt', 'r') as f:
        raw = f.read()
        all_games = ast.literal_eval(raw)

        keys = all_games.keys()
        n_games = len(keys)

        # first things first: lets build some frequency maps
        percent_flags = {}
        for g in keys:
            positives = all_games[g]['positives']
            total = all_games[g]['total']
            rate = positives/total
            if not rate in percent_flags:
                percent_flags[rate] = 0
            percent_flags[rate] += 1
            if rate > pdr:
                check_keyword_match(g, all_games[g])
                with open('malwarekeys.txt', 'a+') as mk:
                    mk.write(g + ": \nhttps://www.virustotal.com/gui/file/" + all_games[g]['resource'] + '\n\n')
                print("positives: " + str(positives) + ", total: " + str(total))
                print("resource: " + str(all_games[g]['resource']))

        malware_count = 0

        for k in sorted(percent_flags.keys()):
            if (k > pdr):
                malware_count += 1
            print("(" + str(k) + ", " + str(percent_flags[k]/n_games * 100) + ")")

        print("malware count: " + str(malware_count))
        print("total games: " + str(n_games))
        print("malware rate: " + str(malware_count/n_games))


        # false positives analysis
        '''
        print()
        fps = {}
        single_count = 0
        for g in keys:
            gd = all_games[g]
            if gd['positives'] == 1:
                single_count += 1
                scans = gd['scans']
                for s in scans.keys():
                    if scans[s]['detected']:
                        if not s in fps:
                            fps[s] = 0
                        fps[s] += 1

        for s in fps.keys():
            print("(" + s + ", " + str(fps[s]) + ")")
        print(fps.keys())
        print("number of single detect games: " + str(single_count))
        '''

def lcw(u, v):
    """Return length of an LCW of strings u and v and its starting indexes.

    (l, i, j) is returned where l is the length of an LCW of the strings u, v
    where the LCW starts at index i in u and index j in v.
    """
    # c[i][j] will contain the length of the LCW at the start of u[i:] and
    # v[j:].
    u = u.lower()
    v = v.lower()
    c = [[-1]*(len(v) + 1) for _ in range(len(u) + 1)]

    for i in range(len(u) + 1):
        c[i][len(v)] = 0
    for j in range(len(v)):
        c[len(u)][j] = 0

    lcw_i = lcw_j = -1
    length_lcw = 0
    for i in range(len(u) - 1, -1, -1):
        for j in range(len(v)):
            if u[i] != v[j]:
                c[i][j] = 0
            else:
                c[i][j] = 1 + c[i + 1][j + 1]
                if length_lcw < c[i][j]:
                    length_lcw = c[i][j]
                    lcw_i = i
                    lcw_j = j

    return u[lcw_i:lcw_i + length_lcw]
    # return length_lcw, lcw_i, lcw_j


def percent_agents_with_kw(kw, game_info):
    count = 0
    for a, r in game_info['scans'].items():
        if not r['result'] == None and kw in r['result'].lower():
            count += 1
    return count/game_info['positives']


def check_keyword_match(game, game_info):
    kw_counts = {}
    print()
    print(game)

    agents = list(game_info['scans'].keys())
    for i in range(len(agents)):
        for j in range(i + 1, len(agents)):
            if not game_info['scans'][agents[i]]['detected']:
                continue
            if not game_info['scans'][agents[j]]['detected']:
                continue
            a1 = game_info['scans'][agents[i]]['result']
            a2 = game_info['scans'][agents[j]]['result']

            match = lcw(a1, a2)
            match = match.strip('.')
            if len(match) < 3:
                continue
            if match not in kw_counts:
                kw_counts[match] = 0
            kw_counts[match] += 1

            #other option: keep the set of agents

    # print(kw_counts)

    kws = list(kw_counts.keys())
    kws = sorted(kws, key=lambda kw:len(kw) * kw_counts[kw], reverse=True)

    result = ""

    for kw in kws:
        if round(percent_agents_with_kw(kw, game_info), 2) >= 0.2:
            result += kw + ": " + str(round(percent_agents_with_kw(kw, game_info), 2)) + ", "
    result = result[:-2]
    print(result)


    # best_val = 0
    # for k, v in kw_counts.items():
    #     if len(k) * v > best_val:
    #         best = k
    #         best_val = len(k) * v


    # print("Best: " + best + ", count: " + str(kw_counts[best]))



if __name__ == '__main__':
    main()