from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import StaleElementReferenceException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import os

# function to take care of downloading file
def enable_download_headless(browser,download_dir):
    browser.command_executor._commands["send_command"] = ("POST", '/session/$sessionId/chromium/send_command')
    params = {'cmd':'Page.setDownloadBehavior', 'params': {'behavior': 'allow', 'downloadPath': download_dir}}
    browser.execute("send_command", params)

# instantiate a chrome options object so you can set the size and headless preference
# some of these chrome options might be uncessary but I just used a boilerplate
# change the <path_to_download_default_directory> to whatever your default download folder is located
chrome_options = Options()
#chrome_options.add_argument("--headless")
chrome_options.add_argument("--window-size=1920x1080")
chrome_options.add_argument("--disable-notifications")
chrome_options.add_argument('--no-sandbox')
chrome_options.add_argument('--verbose')
chrome_options.add_experimental_option("prefs", {
        "download.default_directory": "/Users/esthergoldstein/Downloads",
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing_for_trusted_sources_enabled": True,
        "safebrowsing.enabled": True
})


# initialize driver object and change the <path_to_chrome_driver> depending on your directory where your chromedriver should be
driver = webdriver.Chrome(chrome_options=chrome_options, executable_path="/Users/esthergoldstein/itchingtofindsomemalware/chromedriver")

# change the <path_to_place_downloaded_file> to your directory where you would like to place the downloaded file
download_dir = "/Users/esthergoldstein/itchingtofindsomemalware/"

# function to handle setting up headless download
enable_download_headless(driver, download_dir)


for page in range(1,300): # insert # of pages for Itch.io
	driver.get("https://itch.io/games/downloadable/free?page="+str(page))
	search_input = driver.find_elements_by_css_selector("a[class='title game_link']")
	links = []
	for a_tag in search_input:
		links.append(a_tag.get_attribute('href'))
	i = 0
	for link in links:
		i = i + 1
		driver.get(link)
		driver.implicitly_wait(3)
		wait = WebDriverWait(driver, 10)
		download_button_path = "//a[contains(@class, 'buy_btn') or contains(@class, 'download_btn')]"
		download_button = wait.until(EC.visibility_of_element_located((By.XPATH, download_button_path)))
		el = driver.find_element_by_xpath(download_button_path)
		href = el.get_attribute('href')
		if not "javascript:void(0)" in href:
			driver.get(href)
		else:
			download_button.click()
		try:
			driver.implicitly_wait(2)
			driver.find_element_by_css_selector("a[class='direct_download_btn']")
		except NoSuchElementException:
			continue
		download_url = driver.find_element_by_css_selector("a[class='direct_download_btn']")
		download_url.click()
		try:
			wait = WebDriverWait(driver, 10)
			download_button_path = "//a[contains(@class, 'buy_btn') or contains(@class, 'download_btn')]"
			download_button = wait.until(EC.visibility_of_element_located((By.XPATH, download_button_path)))
			download_button.click()
		except NoSuchElementException:
			continue
		except StaleElementReferenceException:
			continue
