import json
import os
import getopt, sys
import ast

'''
This program parses _stat.txt files left behind by previous runs
of the virustotal_stats.py files and allows us to print some high
level information about them.
'''
def main():
	print("*****************")
	print("Parsing game stats. \n")
	options = parse_args()
	print_summary(options[0], options[1])
	print("*****************")


'''
Print a summary of the relevant _stats file.
'''
def print_summary(folder, threshold):
	stat_file_path = log_file_path(folder, '_stats.txt')
	if not os.path.exists(stat_file_path):
		print("* Error: " )
		print('* ' + stat_file_path)
		print("* doesn't exist. Exiting.")
		return
	else:
		print("\nParsing stats for: " + folder + '_logs/' + folder + '_stats.txt\n')

	stats = parse_log(folder, '_stats.txt')
	count = 0

	dist = {}

	for g in stats:
		npos = stats[g]['positives']
		if npos not in dist:
			dist[npos] = 0
		dist[npos] += 1

		if npos > threshold:
			print(g + ": " + str(npos))
		count += 1
	print ("\nGames parsed: " + str(count))
	for k in sorted(dist.keys()):
		print("Games with " + str(k) + " positives: " + str(dist[k]))


'''
Construct the log file path.
'''
def log_file_path(folder, logtype):
	return os.getcwd() + '/' + folder + '_logs' + '/' + folder + logtype


'''
Read in a log file from previous runs of virustotal_stats
'''
def parse_log(folder, name):
	log_path = log_file_path(folder, name)
	log_dict = {}
	with open(log_path, 'r') as log:
		for line in log:
			# split each line by the delimiter
			line_parts = line.split(' :== ')
			if len(line_parts) == 2:
				log_dict[line_parts[0]] = ast.literal_eval(line_parts[1].strip())

	return log_dict


'''
Parses arguments, setting confguration of which chunks to run.
'''
def parse_args():
	folder = 'itch_extract' # default
	argumentList = sys.argv[1:]

	unixOptions = "f:t:"
	gnuOptions = ["folder=", "threshold="]
	config = [folder, 0]

	try:
		arguments, values = getopt.getopt(argumentList, unixOptions, gnuOptions)
	except getopt.error as err:
		# output error, and return with an error code
		print (str(err))
		sys.exit(2)

	for currentArgument, currentValue in arguments:
		if currentArgument in ("-f", "--folder"):
			print (("Targeting specific folder (%s)") % (currentValue))
			config[0] = currentValue
		if currentArgument in ("-t", "--threshold"):
			print (("Threshold set to (%s)") % (currentValue))
			config[1] = int(currentValue)

	return config


if __name__== "__main__":
  main()