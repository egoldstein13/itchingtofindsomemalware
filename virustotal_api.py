import requests
import json
import time

# mziv's api key:
mziv = '39c27871dcf2ffdf90c0b961070156afa19673350d263c14175a44a7b11e19c0'
# isfm's api key:
isfm = 'ac8b7fc6038c3c9ae9d07a24bfcc0a4a7764151e5304aa92333af019dae2c765'
jackson = '070a59ae24ff57aa9bc04f5fd3d737231ae620ccbf27631d527408768e4b69ef'
esther = '3bbf0d3e84505f208cf4f6531732989a900395bc92b716f1756429c25bdda790'
apikeys = [mziv, isfm, jackson, esther]

# view stats at: https://www.virustotal.com/gui/user/mziv/apikey

class Error(Exception):
    """Base class for exceptions in this module."""
    pass

class TooBigError(Error):
    pass

# not working :(
def get_quotas():
	url_quotas = 'https://www.virustotal.com/api/v3/users/'
	headers = {'x-apikey': apikeys[0]}

	response = requests.get(url_quotas + apikeys[0], headers=headers)
	response_json = json.loads(response.text)
	quotas = response_json['data']['attributes']['quotas']
	print(quotas)
	return quotas

def within_quotas(quotas):
	for k in quotas:
		if quotas[k]['used'] >= quotas[k]['allowed'] and quotas[k]['allowed'] > 0:
			return False

	return True

def print_nonzero_quotas(quotas):
	for k in quotas:
		if quotas[k]['used'] > 0:
			print("used: ", quotas[k]['used'], " allowed: ", quotas[k]['allowed'])

'''
Uploads a file to be scanned by Virustotal.
Returns the resource ID for this file.
'''
def post_file(file, k):
	url = 'https://www.virustotal.com/vtapi/v2/file/scan'
	params = {'apikey': apikeys[k]}
	files = {'file': (file, open(file, 'rb'))}

	response = requests.post(url, files=files, params=params)

	if response == None:
		print("* No response!")
		raise IOError
	elif 'Request Entity Too Large' in response.text:
		raise TooBigError

	response_json = json.loads(response.text)
	if response_json['response_code'] == -1:
		print("* Response error?")
		raise IOError

	resource = response_json['resource']
	return resource


'''
Gets a big file url to upload to and then uploads it.
Returns the resource ID for this file.
'''
def post_big_file(file, k, sleeptime):
	vt_upload_url = 'https://www.virustotal.com/vtapi/v2/file/scan/upload_url'
	params = {'apikey': apikeys[k]}
	response = requests.get(vt_upload_url, params=params)

	upload_url_json = json.loads(response.text)
	upload_url = upload_url_json['upload_url']

	# Counts as a request; we don't want to DOS VT.
	time.sleep(sleeptime)

	files = {'file': (file, open(file, 'rb'))}
	response = requests.post(upload_url, files=files)

	if response == None:
		print("* No response!")
		raise IOError
	elif 'Request Entity Too Large' in response.text:
		raise TooBigError

	print(response.text)
	response_json = json.loads(response.text)
	if response_json['response_code'] == -1:
		print("* Response error?")
		raise IOError

	resource = response_json['resource']

	return resource


'''
Given a resource token, gets the stats for that file.
Input from post_file can be passed into this function.
'''
def check_file(resource, k, allinfo=False):
	url_file_req = 'https://www.virustotal.com/vtapi/v2/file/report'
	params = {'apikey': apikeys[k], 'resource': resource, 'allinfo': 'false'}
	if allinfo:
		params[allinfo] = 'true'
	response = requests.get(url_file_req, params=params)
	if response != None:
		return response.json()
	raise IOError

'''
Given a hash, get the behavior report for that file.
'''
def file_behavior(hash, k):
	url = 'https://www.virustotal.com/vtapi/v2/file/behaviour'
	params = {'apikey':apikeys[k],'hash':hash}
	response = requests.get(url, params=params)
	print(response.text)
	return response.json()


badfile = 'C:\\Users\\peace\\Documents\\GitHub\\itchingtofindsomemalware\\Files\\mimic.zip'

testfile = 'C:\\Users\\peace\\Documents\\GitHub\\itchingtofindsomemalware\\itch_extract\\text\\descend\\rustup-init.exe'
# print("Fetching quotas.")
# quotas = get_quotas()
# print_nonzero_quotas(quotas)


# print("Posting file.")
# resource = post_file(testfile)
# print(resource)

# filestats = check_file(resource)
# print(filestats)


# if (within_quotas(quotas)):
#print(check_file('e8bf0004af0266b99d272ea0e1588504c99e695dab5e3ff732e95935f9212930'))

# print(response.json())
# print(response_json['quotas'])