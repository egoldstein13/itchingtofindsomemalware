import virustotal_api
import os
import time # so we can avoid exceeding the VirusTotal quotas
import json

debug = True

#blacklist = ['358404:hope-abandoned', '1729021:cosmoteer']

# MAX REQUEST RATE: 4 per minute (post and get!)

# This script should be in the same folder as the folders:
# 	itch_download
#	itch_extract *
#	steam_downlod
#	steam_extract
def main():
	print("Welcome to your game malware detection companion!\n")
	folder = 'itch_extract' # currently just configured for itch

	print("Detecting log file for folder " + folder)
	if not os.path.exists(os.getcwd() + '/' + folder + '_log.txt'):
		print("- Log file not found; finding and uploading exes")
		upload_exes(folder, {})
	else:
		print("- Log file found; continuing where it left off")
		log_dict = parse_log(folder)
		upload_exes(folder, log_dict)

	# read in dump.txt
	parse_dump(folder)

'''
Read in the log file from previous runs of this script.
'''
def parse_log(folder):
	log_path = os.getcwd() + '/' + folder + '_log.txt'
	log_dict = {}
	with open(log_path, 'r') as log:
		for line in log:
			# split each line by the delimiter
			line_parts = line.split(' :== ')
			if len(line_parts) == 2:
				log_dict[line_parts[0]] = line_parts[1]
	if (debug):
		print(log_dict)
		print('')
	return log_dict

'''
Iterate through all folders in the given top level folder and
upload the first exe found in each of them to VirusTotal,
writing out the corresponding resource names to a file.

past_jobs is a dictionary of all the resource keys we already got
from past runs. We want to ignore those.
'''
def upload_exes(folder_name, past_jobs):
	cwd = os.getcwd()
	folder = '/' + folder_name + '/'

	blacklist = []
	with open(folder_name + '_blacklist.txt', 'r+') as bl:
		for line in bl:
			blacklist.append(line.strip())
	if (debug): print(blacklist)

	# Loop over everything in that folder
	itch_folders = os.listdir(cwd + folder)
	if (debug):
		print("Games to post:")
		print(itch_folders)
		print('')

	with open(folder_name + '_log.txt', 'a+') as log:
		# Keep a map from folder names to resource keys
		itch_resource_keys = {}
		for game in itch_folders:
			if game in blacklist:
				print("* " + game + " found in blacklist. Continuing\n")
				continue

			if game in past_jobs:
				itch_resource_keys[game] = past_jobs[game]
				print("* " + game + " found in log. Continuing\n")
				continue

			path = cwd + folder + game
			exe_path = find_exe_path(path)
			if (exe_path == 'No path'):
				print("* No exe found for " + game + "\n")
				continue

			if (debug): print(game)
			if (debug): print(exe_path)

			# It's possible we'll run into a weird socket error - we want
			# the script to continue regardless!
			try:
				resource = virustotal_api.post_file(exe_path)
			except IOError:
				print("* An IOError occurred. Adding to blacklist\n")
				add_to_blacklist(folder_name, game)
				continue
			except json.decoder.JSONDecodeError:
				print("* A JSONDecodeError occurred. Adding to blacklist\n")
				add_to_blacklist(folder_name, game)
				continue

			itch_resource_keys[game] = resource
			log.write(game + ' :== ' + resource + '\n')

			if (debug): print(resource)

			print("* Sleeping for 15s (don't want to DOS VirusTotal...)\n")
			time.sleep(15) # rate limit us to just below 4 requests per minute

	#if (debug): print(itch_resource_keys)

	# Write map out to file
	with open(folder_name + '_dump.txt', 'w') as file:
		file.write(json.dumps(itch_resource_keys))


'''
Add a game to the blacklist file
'''
def add_to_blacklist(folder_name, game):
	with open(folder_name + '_blacklist.txt', 'a+') as bl:
		bl.write(game + '\n')


'''
Given a path to a higher level folder, find the likely exe.
'''
def find_exe_path(folder_path):
	# Walk recursively downwards until you find an exe.
	folder_path += '/'
	exes = []
	for (dirpath, dirnames, filenames) in os.walk(folder_path):
		for name in filenames:
			if name.endswith('.exe'):
				# Skip over unity crash handler exes
				if 'UnityCrashHandler' in name:
					continue
				return dirpath + '/' + name
				# exes.append(dirpath + '/' + name) # currently unused

	return 'No path'


'''
Read in a dump file. Retrieve the VirusTotal stats for each of the files and output
them to an output file.
'''
def parse_dump(folder_name):
	with open(os.getcwd() + '/' + folder_name + '_dump.txt', mode='r') as dump_file:
		dump = dump_file.read()
		resource_keys = json.loads(dump)

	#if (debug): print(itch_resource_keys)
	for game in resource_keys:
		try:
			result = virustotal_api.check_file(resource_keys[game])
			print(game + ": ", result['positives'])
		except json.decoder.JSONDecodeError:
			print("Error decoding JSON response")

		time.sleep(16) #rate limit these requests too!!




if __name__== "__main__":
  main()