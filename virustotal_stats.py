import virustotal_api
import os
import time # so we can avoid exceeding the VirusTotal quotas
import json
import getopt, sys

# Global config variables. I know it's gross I'll fix it later I promise.
debug = True

# MAX REQUEST RATE: 4 per minute (post and get!)

# This script should be in the same folder as the folders:
# 	itch_download
#	itch_extract *
#	steam_downlod
#	steam_extract
def main():
	print("Welcome to your game malware detection companion!\n")

	options = parse_args()
	folder = options[0]

	if 'u' in options:
		print ("\nBeginning upload.\n")
		upload_folder(folder)
	if 'd' in options:
		print ("\nBeginning download.\n")
		download_folder(folder)


'''
Parses arguments, setting confguration of which chunks to run.
'''
def parse_args():
	folder = 'itch_extract' # default
	argumentList = sys.argv[1:]

	unixOptions = "f:udv"
	gnuOptions = ["folder=", "upload", "download", "verbose"]
	config = [folder]

	try:
	    arguments, values = getopt.getopt(argumentList, unixOptions, gnuOptions)
	except getopt.error as err:
	    # output error, and return with an error code
	    print (str(err))
	    sys.exit(2)

	for currentArgument, currentValue in arguments:
	    if currentArgument in ("-u", "--upload"):
	        print ("Uploading all games in specified folder.")
	        config.append('u')
	    elif currentArgument in ("-d", "--download"):
	        print ("Downloading stats for all games in specified log file.")
	        config.append('d')
	    elif currentArgument in ("-f", "--folder"):
	        print (("Targeting specific folder (%s)") % (currentValue))
	        config[0] = currentValue
	    elif currentArgument in ("-v", "--verbose"):
	    	print ("Printing debug information.")
	    	debug = True

	return config

'''
Read in a log file from previous runs of this script.
'''
def parse_log(folder, name):
	log_path = os.getcwd() + '/' + folder + name
	log_dict = {}
	with open(log_path, 'r') as log:
		for line in log:
			# split each line by the delimiter
			line_parts = line.split(' :== ')
			if len(line_parts) == 2:
				log_dict[line_parts[0]] = line_parts[1]
	# if (debug):
	# 	print(log_dict)
	# 	print('')
	return log_dict

'''
Wrapper function for uploading.
'''
def upload_folder(folder):
	print("Detecting log file for folder " + folder)
	if not os.path.exists(os.getcwd() + '/' + folder + '_log.txt'):
		print("- Log file not found; finding and uploading exes")
		upload_exes(folder, {})
	else:
		print("- Log file found; continuing where it left off")
		log_dict = parse_log(folder, '_log.txt')
		upload_exes(folder, log_dict)

'''
Iterate through all folders in the given top level folder and
upload the first exe found in each of them to VirusTotal,
writing out the corresponding resource names to a file.

past_jobs is a dictionary of all the resource keys we already got
from past runs. We want to ignore those.
'''
def upload_exes(folder_name, past_jobs):
	cwd = os.getcwd()
	folder = '/' + folder_name + '/'

	blacklist = []
	with open(folder_name + '_blacklist.txt', 'r+') as bl:
		for line in bl:
			blacklist.append(line.strip())
	if (debug): print("Blacklist: " + str(blacklist) + "\n")

	# Loop over everything in that folder
	itch_folders = os.listdir(cwd + folder)
	if (debug):
		print("Games to post:")
		print(itch_folders)
		print('')

	with open(folder_name + '_log.txt', 'a+') as log:
		# Keep a map from folder names to resource keys
		itch_resource_keys = {}
		for game in itch_folders:
			if game in blacklist:
				print("* " + game + " found in blacklist. Continuing\n")
				continue

			if game in past_jobs:
				itch_resource_keys[game] = past_jobs[game]
				print("* " + game + " found in log. Continuing\n")
				continue

			path = cwd + folder + game
			exe_path = find_exe_path(path)
			if (exe_path == 'No path'):
				print("* No exe found for " + game + "\n")
				continue

			if (debug): print(game)
			if (debug): print(exe_path)

			# It's possible we'll run into a weird socket error - we want
			# the script to continue regardless!
			try:
				resource = virustotal_api.post_file(exe_path)
			except IOError:
				print("* An IOError occurred. Adding to blacklist\n")
				add_to_blacklist(folder_name, game)
				continue
			except json.decoder.JSONDecodeError:
				print("* A JSONDecodeError occurred. Adding to blacklist\n")
				add_to_blacklist(folder_name, game)
				continue

			itch_resource_keys[game] = resource
			log.write(game + ' :== ' + resource + '\n')

			if (debug): print(resource)

			print("* Sleeping for 15s (don't want to DOS VirusTotal...)\n")
			time.sleep(15) # rate limit us to just below 4 requests per minute

	#if (debug): print(itch_resource_keys)

	# Write map out to file
	with open(folder_name + '_dump.txt', 'w') as file:
		file.write(json.dumps(itch_resource_keys))


'''
Add a game to the blacklist file
'''
def add_to_blacklist(folder_name, game):
	with open(folder_name + '_blacklist.txt', 'a+') as bl:
		bl.write(game + '\n')


'''
Given a path to a higher level folder, find the likely exe.
'''
def find_exe_path(folder_path):
	# Walk recursively downwards until you find an exe.
	folder_path += '/'
	exes = []
	for (dirpath, dirnames, filenames) in os.walk(folder_path):
		for name in filenames:
			if name.endswith('.exe'):
				# Skip over unity crash handler exes
				if 'UnityCrashHandler' in name:
					continue
				return dirpath + '/' + name
				# exes.append(dirpath + '/' + name) # currently unused

	return 'No path'


def download_folder(folder):
	print("Detecting log file for folder " + folder)
	if not os.path.exists(os.getcwd() + '/' + folder + '_stats.txt'):
		print("- Log file not found; downloading all stats")
		parse_dump(folder, {})
	else:
		print("- Log file found; continuing where it left off")
		log_dict = parse_log(folder, '_stats.txt')
		parse_dump(folder, log_dict)


'''
Read in a dump file. Retrieve the VirusTotal stats for each of the files and output
them to an output file.
'''
def parse_dump(folder_name, past_jobs):
	print()

	with open(os.getcwd() + '/' + folder_name + '_dump.txt', mode='r') as dump_file:
		dump = dump_file.read()
		resource_keys = json.loads(dump)

	with open(folder_name + '_stats.txt', 'a+') as log:
		for game in resource_keys:
			if game in past_jobs:
				print ("* " + game + " found in stats. Continuing\n")
				continue

			try:
				result = virustotal_api.check_file(resource_keys[game])
				if (debug): print(game + ": " + str(result['positives']) + '\n')
				log.write(game + " :== " + str(result) + '\n')
			except json.decoder.JSONDecodeError:
				print("* Error decoding JSON response - adding to retry list")
				add_to_retrylist(folder_name, game)
			except IOError:
				print("* IOError - adding to retry list")
				add_to_retrylist(folder_name, game)

			time.sleep(16) #rate limit these requests too!!

'''
Add a game to the retry list
'''
def add_to_retrylist(folder_name, game):
	with open(folder_name + '_retry.txt', 'a+') as bl:
		bl.write(game + '\n')

if __name__== "__main__":
  main()